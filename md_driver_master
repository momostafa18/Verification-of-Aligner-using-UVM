`ifndef MD_DRIVER_MASTER_SV
  `define MD_DRIVER_MASTER_SV

class md_driver_master#(int unsigned DATA_WIDTH = 32) extends md_driver_base#(DATA_WIDTH,md_item_drv_MASTER);
  
   	typedef virtual md_if#(DATA_WIDTH) md_vif;
    
    md_vif vif ;
          
  `uvm_component_param_utils(md_driver_master#(DATA_WIDTH))
    
    function new(string name = "", uvm_component parent);
      super.new(name, parent);

    endfunction
  
  virtual function void build_phase(uvm_phase phase);
      super.build_phase(phase); 	
  endfunction
      

    
  virtual task drive_transaction(md_item_drv_MASTER item);
      

      int unsigned data_width_in_bytes = DATA_WIDTH / 8;
      
      `uvm_info("DEBUG", $sformatf("Driving \"%0s\": %0s", item.get_full_name(), item.convert2string()), UVM_NONE)
      
      if(item.offset + item.data.size() > data_width_in_bytes) begin
        `uvm_fatal("ALGORITHM_ISSUE", $sformatf("Trying to drive an item with offset %0d and %0d bytes but the width of the data bus, in bytes, is %0d", item.offset, item.data.size(), data_width_in_bytes))
      end

      for(int i = 0; i < item.pre_drive_delay; i++) begin
        @(posedge vif.pclk);
      end
      
      vif.valid   <= 1;

      begin
        bit[DATA_WIDTH-1:0] data = 0;
        
        foreach(item.data[idx]) begin
          bit[DATA_WIDTH-1:0] temp = item.data[idx] << ((item.offset + idx) * 8);
          
          data = data | temp;
        end
        
        vif.data <= data;
	   end
      
      vif.offset  <= item.offset ;
      vif.size    <= item.data.size();
                
      @(posedge vif.pclk);
      
     while(vif.ready !== 1) begin
       @(posedge vif.pclk);
      end
      
      vif.valid  <= 0;
      vif.data   <= 0;
      vif.offset <= 0;
      vif.size   <= 0;   

     
      for(int i = 0; i < item.post_drive_delay; i++) begin
        @(posedge vif.pclk);
      end

    endtask
  
  virtual function void handle_reset(uvm_phase phase);
      
    vif = agent_config.get_vif();

      super.handle_reset(phase);
      
      vif.valid  <= 0;
      vif.data   <= 0;
      vif.offset <= 0;
      vif.size   <= 0;
    endfunction


  endclass
`endif	
