`ifndef MD_INTERFACE_SV
  `define MD_INTERFACE_SV


interface md_if#(int unsigned DATA_WIDTH = 32)(input pclk);
    
  localparam int OFFSET_WIDTH = (DATA_WIDTH/8 <= 1) ? 1 : $clog2(DATA_WIDTH/8);
  localparam int SIZE_WIDTH   = $clog2(DATA_WIDTH/8) + 1;
  
  
  logic preset_n ;
  logic valid;
  logic [DATA_WIDTH - 1 : 0 ] data ;
  logic [OFFSET_WIDTH-1:0] offset;
  logic [SIZE_WIDTH-1:0] size;
  logic ready ;
  logic err;
  
  bit  has_checks;

    initial begin
      has_checks = 1;
    end	
  

  initial begin
    
    if($log10(DATA_WIDTH)/$log10(2) - $clog2(DATA_WIDTH) != 0) begin
      $error("DATA_WIDTH is not a power of two - value in binary: 'b%0b, in hex is 'h%0h, in dec is %0d", DATA_WIDTH, DATA_WIDTH, DATA_WIDTH);
    end
  end
  
  
  if(DATA_WIDTH < 8) begin
      $error($sformatf("DATA_WIDTH must be bigger than 8 but detected value %0d", DATA_WIDTH));
    end
  
  
  property ready_at_valid_high;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
      $fell(valid) |-> $past(ready) == 1;
  endproperty
  
  READY_AT_VALID_HIGH : assert property(ready_at_valid_high) else
    $error("Valid didn't stay high until ready becomes high");
    
    
   property data_valid_valid_high;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
     valid == 1 |-> $isunknown(data) == 0  ;
  endproperty
  
    DATA_VALID_VALID_HIGH : assert property(data_valid_valid_high) else
    $error("Data can not be invalid when valid is high");
   
      
  property offset_valid_valid_high;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
    valid == 1|-> $isunknown(offset) == 0  
  endproperty
  
      OFFSET_VALID_VALID_HIGH : assert property(offset_valid_valid_high) else
      $error("offset can not be invalid when valid is high");
      
  property size_valid_valid_high;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
    valid == 1|-> $isunknown(size) == 0   ;
  endproperty
  
    SIZE_VALID_VALID_HIGH : assert property(size_valid_valid_high) else
      $error("size can not be invalid when valid is high");
      
  property err_valid_valid_high;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
    valid == 1|-> $isunknown(err) == 0  
  endproperty
  
    ERROR_VALID_VALID_HIGH : assert property(err_valid_valid_high) else
      $error("Error can not be invalid when valid is high");
      
  property unknown_valid;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
    $isunknown(valid) == 0 ;
  endproperty
  
    UNKNOWN_VALID : assert property(unknown_valid) else
      $error("Valid can not have invalid value");
    
      
  property ready_valid_valid_high;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
    valid == 1|-> $isunknown(ready) == 0  
  endproperty
  
    READY_VALID_VALID_HIGH : assert property(ready_valid_valid_high) else
      $error("Ready can not be invalid when valid is high");    
    
  property data_constant_ready_high;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
		valid & $past(valid) & !$past(ready) |-> $stable(data) == 1;  
  endproperty
  
  DATA_CONSTANT_READY_HIGH : assert property(data_constant_ready_high) else
    $error("Data must remain constant until ready becomes high");
  
  property offset_constant_ready_high;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
    valid & $past(valid) & !$past(ready) |-> $stable(offset) == 1;  
  endproperty
  
  OFFSET_CONSTANT_READY_HIGH : assert property(offset_constant_ready_high) else
    $error("Offset must remain constant until ready becomes high");
      
  property size_constant_ready_high;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
    valid & $past(valid) & !$past(ready) |-> $stable(size) == 1;  
  endproperty
  
  SIZE_CONSTANT_READY_HIGH : assert property(size_constant_ready_high) else
    $error("Offset must remain constant until ready becomes high");
    
    
  property size_not_equal_0;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
     valid |-> size != 0;
  endproperty
  
  SIZE_NOT_EQUAL_ZERO : assert property(size_not_equal_0) else
    $error("size can not be equal to 0");
    
  property err_high_valid_ready_high;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
     err |-> valid && ready  ;
  endproperty
  
  ERR_HIGH_VALID_READY_HIGH : assert property(err_high_valid_ready_high) else
    $error("Error high when valid or ready is not high ");
    
  property offset_plus_size_smaller_that_data_width_in_size;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
    valid |-> offset + size <= (DATA_WIDTH / 8)   ;
  endproperty
  
    OFFSET_PLUS_SIZE_SMALLER_THAN_DATA_WIDTH_IN_SIZE : assert property(offset_plus_size_smaller_that_data_width_in_size) else
      $error("Offset + Size must be smaller than data width in size");
    
  property unknown_value_err_p;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
      valid & ready |-> $isunknown(err) == 0;
    endproperty
    
    UNKNOWN_VALUE_ERR_A : assert property(unknown_value_err_p) else
      $error("Detected unknown value for MD signal err");
  endinterface

`endif
