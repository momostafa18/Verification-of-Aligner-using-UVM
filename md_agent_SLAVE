`ifndef MD_AGENT_SLAVE_SV
  `define MD_AGENT_SLAVE_SV

  class md_agent_SLAVE#(int unsigned DATA_WIDTH = 32) extends md_agent_base#(DATA_WIDTH, md_item_drv_SLAVE);
    
    md_agent_config_SLAVE#(DATA_WIDTH) agent_config_SLAVE;
    
    md_sequencer_SLAVE#(DATA_WIDTH) sequencer;

    `uvm_component_param_utils(md_agent_SLAVE#(DATA_WIDTH))
    
    function new(string name = "", uvm_component parent);
      super.new(name, parent);

      md_agent_config_base#(DATA_WIDTH)::type_id::set_inst_override
        (md_agent_config_SLAVE#(DATA_WIDTH)::get_type(), "agent_config", this);

      md_sequencer_base#(md_item_drv_SLAVE)::type_id::set_inst_override
        (md_sequencer_SLAVE#(DATA_WIDTH)::get_type(), "sequencer", this);
      
      md_driver_base#(DATA_WIDTH,md_item_drv_SLAVE)::type_id::set_inst_override
      (md_driver_slave#(DATA_WIDTH)::get_type(), "driver", this);
    endfunction
    
    virtual function void connect_phase(uvm_phase phase);
      super.connect_phase(phase);
      
      connect_port_from_mon_to_slave_seqr();

    endfunction
    
    
    protected virtual function void connect_port_from_mon_to_slave_seqr();
      if(agent_config.get_active_passive() == UVM_ACTIVE) begin

        

        if($cast(sequencer, super.sequencer) == 0) begin

          `uvm_fatal("ALGORITHM_ISSUE", $sformatf("Could not cast %0s to %0s", super.sequencer.get_full_name(), md_sequencer_SLAVE#(DATA_WIDTH)::type_id::type_name))
        end
        
        monitor.output_port.connect(sequencer.port_from_mon);
      end
    endfunction

  endclass
`endif
