`ifndef APB_DRIVER_SV
  `define APB_DRIVER_SV

class apb_driver extends uvm_ext_driver#(apb_vif,apb_item_drv);
    
    apb_item_drv item;
  
    apb_vif vif;
  
    apb_agent_config agent_config;
      
	`uvm_component_utils(apb_driver)
    
    function new(string name = "", uvm_component parent);
      super.new(name, parent);
    endfunction

  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    
    // Factory Creation
    item = apb_item_drv::type_id::create("item");

  endfunction
  
 virtual function void end_of_elaboration_phase(uvm_phase phase);
      super.end_of_elaboration_phase(phase); 
         
      if($cast(agent_config, super.agent_config) == 0) begin
        `uvm_fatal("ALGORITHM_ISSUE", $sformatf("Could not cast %0s to %0s", 
                                                super.agent_config.get_type_name(), apb_agent_config::type_id::type_name))
      end
    endfunction
  
  virtual task drive_transaction(apb_item_drv item);
    	
      `uvm_info("DRIVER", $sformatf("Driving: addr= 0x%0h  data= 0x%0h  dir= %0s  pre_delay= %0d  post_delay= %0d",
                              item.addr, item.data,
                              (item.dir == APB_WRITE ? "WRITE" : "READ"),
                              item.pre_drive_delay, item.post_drive_delay), UVM_LOW)



      for(int i = 0; i < item.pre_drive_delay; i++) begin
        @(posedge vif.pclk);
      end
      
      vif.psel   <= 1;
      vif.pwrite <= bit'(item.dir);
      vif.paddr  <= item.addr;
      
      if(item.dir == APB_WRITE) begin
            vif.pwdata <= item.data;
          end
      
      @(posedge vif.pclk);
      
      vif.penable <= 1;
      
      @(posedge vif.pclk);
      
      while(vif.pready !== 1) begin
        @(posedge vif.pclk);
      end
      
      vif.psel    <= 0;
      vif.penable <= 0;
      vif.pwrite  <= 0;
      vif.paddr   <= 0;
      vif.pwdata  <= 0;
      
      for(int i = 0; i < item.post_drive_delay; i++) begin
        @(posedge vif.pclk);
      end

  endtask

  virtual function void handle_reset(uvm_phase phase);
     
    vif = agent_config.get_vif();

    super.handle_reset(phase);
    
    //Initialize the signals
      vif.psel    <= 0;
      vif.penable <= 0;
      vif.pwrite  <= 0;
      vif.paddr   <= 0;
      vif.pwdata  <= 0;

    endfunction

  endclass
`endif	
