`ifndef APB_INTERFACE_SV
  `define APB_INTERFACE_SV


  `ifndef APB_MAX_DATA_WIDTH
  	`define APB_MAX_DATA_WIDTH 32
  `endif

  `ifndef APB_MAX_ADDR_WIDTH
  	`define APB_MAX_ADDR_WIDTH 16
  `endif

interface apb_if (input pclk);
    
    logic preset_n ;
  
    logic[`APB_MAX_ADDR_WIDTH-1:0] paddr;

    logic pwrite;

    logic psel;

    logic penable;

    logic[`APB_MAX_DATA_WIDTH-1:0] pwdata;

    logic pready;

    logic[`APB_MAX_DATA_WIDTH-1:0] prdata;

    logic pslverr;
  
    bit  has_checks;

    initial begin
      has_checks = 1;
    end	
  


  
  sequence setup_phase_s;
    ((psel == 1) && ($past(psel == 0))) || ((psel == 1) && ($past(psel == 1)) && ($past(pready == 1)));
  endsequence
  
  sequence access_phase_s;
    (psel == 1) && (penable == 1);
  endsequence
  
  property penable_at_setup_phase_p;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
    	setup_phase_s |-> penable == 0;
  endproperty
  
  PENABLE_AT_SETUP_PHASE_A : assert property(penable_at_setup_phase_p) else
      $error("PENABLE at \"Setup Phase\" is not equal to 0");
  
    
  property penable_at_access_phase_p;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
    	setup_phase_s |=> penable == 1;
  endproperty
  
  PENABLE_AT_ACCESS_PHASE_A : assert property(penable_at_access_phase_p) else
    $error("PENABLE at \"Access Phase\" is not equal to 1"); 
    
    
    property penable_exiting_access_phase_p;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
    	access_phase_s and (pready == 1) |=> penable == 0;
  endproperty
  
  PENABLE_EXITING_ACCESS_PHASE_A : assert property(penable_exiting_access_phase_p) else
    $error("PENABLE after \"Access Phase\" is not deasserted"); 
    
    
  property penable_stable_at_access_phase_p;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
    	access_phase_s |-> penable == 1;
  endproperty
  
  PENABLE_STABLE_AT_ACCESS_PHASE_A : assert property(penable_stable_at_access_phase_p) else
    $error("PENABLE is not stable"); 
    
    property paddr_stable_at_access_phase_p;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
      access_phase_s |-> $stable(paddr);
  endproperty
  
    PADDRESS_STABLE_AT_ACCESS_PHASE_A : assert property(paddr_stable_at_access_phase_p) else
      $error("PADDRESS is not stable"); 
    
    property pwrite_stable_at_access_phase_p;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
      access_phase_s |-> $stable(pwrite);
  endproperty
  
  PWRITE_STABLE_AT_ACCESS_PHASE_A : assert property(pwrite_stable_at_access_phase_p) else
    $error("PWRITE is not stable"); 
    
    property pwrite_data_stable_at_access_phase_p;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
      access_phase_s and (pwrite == 1) |-> $stable(pwdata);
  endproperty
  
  PWRITE_DATA_STABLE_AT_ACCESS_PHASE_A : assert property(pwrite_data_stable_at_access_phase_p) else
    $error("PWRITE DATA is not stable"); 
    
    
    property unknown_value_psel_p;
      @(posedge pclk) disable iff(!preset_n || !has_checks )
       $isunknown(psel) == 0;
  endproperty
  
  UNKNOWN_VALUE_PSEL_A : assert property(unknown_value_psel_p) else
    $error("Detected unknown value for APB signal PSEL"); 
    
    property unknown_value_paddr_p;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
      psel == 1 |-> $isunknown(paddr) == 0;
  endproperty
  
  UNKNOWN_VALUE_PADDRESS_A : assert property(unknown_value_paddr_p) else
    $error("Detected unknown value for APB signal PADDR"); 
    
    property unknown_value_pwrite_p;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
      psel == 1 |-> $isunknown(pwrite) == 0;
  endproperty
  
  UNKNOWN_VALUE_PWRITE_A : assert property(unknown_value_pwrite_p) else
    $error("Detected unknown value for APB signal PWRITE"); 
    
    property unknown_value_penable_p;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
         psel == 1 |=> $isunknown(penable) == 0;
  endproperty
  
  UNKNOWN_VALUE_PENABLE_A : assert property(unknown_value_penable_p) else
    $error("Detected unknown value for APB signal PENABLE");
    
    property unknown_value_pwdata_p;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
      psel == 1 && pwrite == 1 |-> $isunknown(pwrite) == 0;
  endproperty
  
  UNKNOWN_VALUE_PWDATA_A : assert property(unknown_value_pwdata_p) else
    $error("Detected unknown value for APB signal PWDATA");
    
    property unknown_value_pready_p;
      @(posedge pclk) disable iff(!preset_n || !has_checks )
      psel == 1 |=> $isunknown(pready) == 0;
  endproperty
  
    UNKNOWN_VALUE_PREADY_A : assert property(unknown_value_pready_p) else
      $error("Detected unknown value for APB signal PREADY");
    
    property unknown_value_prdata_p;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
      psel == 1 && pready == 1 && pwdata == 0 && pslverr == 0  |-> $isunknown(prdata) == 0;
  endproperty
  
  UNKNOWN_VALUE_PREAD_DATA_A : assert property(unknown_value_prdata_p) else
    $error("Detected unknown value for APB signal PRDATA");
    
    property unknown_value_pslverr_p;
    @(posedge pclk) disable iff(!preset_n || !has_checks)
      psel == 1 && pready == 1 |-> $isunknown(pslverr) == 0;
  endproperty
  
  UNKNOWN_VALUE_PSLVERR_A : assert property(unknown_value_pslverr_p) else
    $error("Detected unknown value for APB signal PSLVERR");
    
    
  
  endinterface



`endif
