`ifndef ALGN_ENV_CONFIG_SV
  `define ALGN_ENV_CONFIG_SV

class algn_env_config extends uvm_component ;

  
  local bit has_checks;

  local int unsigned algn_data_width;
  
  
  `uvm_component_utils(algn_env_config)
    
    function new(string name = "", uvm_component parent);
      super.new(name, parent);

      has_checks       =  1 ;
      algn_data_width  = 32 ;
    endfunction
  
  virtual function bit get_has_checks();
      return has_checks;
    
  endfunction
    
    
  virtual function void set_has_checks(bit value);
      has_checks = value;

  endfunction
  
  virtual function int unsigned get_algn_data_width();
      return algn_data_width;
    
  endfunction
    
    
  virtual function void set_algn_data_width(int unsigned value);
      //The minimum legal value for this field is 8.
      if(value < 8) begin
        `uvm_fatal("ALGORITHM_ISSUE", $sformatf("The minimum legal value for algn_data_width is 8 but user tried to set it to %0d", value))
      end
      
      //The value must be a power of 2
      if($countones(value) != 1) begin
        `uvm_fatal("ALGORITHM_ISSUE", $sformatf("The value for algn_data_width must be a power of 2 but user tried to set it to %0d", value))
      end
      
      algn_data_width = value;
    
  endfunction
    


  endclass
`endif	
