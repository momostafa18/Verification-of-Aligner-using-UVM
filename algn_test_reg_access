`ifndef ALGN_TEST_REG_ACCESS_SV
  `define ALGN_TEST_REG_ACCESS_SV

  class algn_test_reg_access extends algn_test_base;

    apb_sequence_simple seq_simple ;
    
    apb_sequence_rw     seq_rw     ;
    
    apb_sequence_random seq_random ;
    
    apb_sequence_basic  seq_basic ;
        
	`uvm_component_utils(algn_test_reg_access)
    
    function new (string name = "" , uvm_component parent);
      super.new(name, parent);
    endfunction 
    
    function void build_phase(uvm_phase phase);
      super.build_phase(phase);
    
    // Factory Creation
    seq_simple = apb_sequence_simple::type_id::create("seq_simple");
    seq_rw     = apb_sequence_rw::type_id::create("seq_rw");
    seq_random = apb_sequence_random::type_id::create("seq_random");
    seq_basic  = apb_sequence_basic::type_id::create("seq_basic");

    endfunction
    
    
	virtual task run_phase(uvm_phase phase);

      uvm_status_e status;
      uvm_reg_data_t data;

      phase.raise_objection(this, "TEST_DONE");
      #100;
            
      repeat(2) begin
        md_sequence_simple_master seq_simple = md_sequence_simple_master::type_id::create("seq_simple");
        seq_simple.set_sequencer(env.agent_MASTER.sequencer);

        void'(seq_simple.randomize() with {
          item.data.size() == 3;
          item.offset      == 0;
        });

        seq_simple.start(env.agent_MASTER.sequencer);
      end

      
      void'(env.model.reg_block.STATUS_REG.CNT_DROP.predict(2));
      
      env.model.reg_block.STATUS_REG.read(status, data);
      
      //Clear the drop counter
      env.model.reg_block.CTRL_REG.CLR.set(1);
      env.model.reg_block.CTRL_REG.update(status);
      
      env.model.reg_block.STATUS_REG.read(status, data);
      
      

      #100 ;
      `uvm_info("DEBUG", "this is the end of the test", UVM_LOW)
      phase.drop_objection(this, "TEST_DONE"); 
    endtask

  endclass
`endif	
